// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= USER =========
model User {
  id                 String             @id @default(uuid()) @db.Uuid
  email              String             @unique
  passwordHash       String             @map("password_hash")
  fullName           String             @map("full_name")
  userType           UserType           @default(individual) @map("user_type")
  institutionId      String?            @map("institution_id") @db.Uuid // Foreign key
  institution        Institution?       @relation(fields: [institutionId], references: [id])
  fieldOfStudy       String?            @map("field_of_study")
  orcidId            String?            @map("orcid_id")
  subscriptionPlan   SubscriptionPlan?  @map("subscription_plan") // nullable enum
  subscriptionStatus SubscriptionStatus @default(inactive) @map("subscription_status")
  avatarUrl          String?            @map("avatar_url")
  preferences        Json?              @db.JsonB
  emailVerified      Boolean            @default(false) @map("email_verified")
  isActive           Boolean            @default(true) @map("is_active")
  lastLogin          DateTime?          @map("last_login")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")

  libraries       Libraries[]
  memberships     LibraryMemberships[] @relation
  sentInvitations LibraryMemberships[] @relation("UserInvites")

  LibraryInvitations LibraryInvitations[]

  ReferencesModifiedBy References[] @relation("ReferencesModifiedBy")

  ReferencesAddedBy References[] @relation("ReferencesAddedBy")

  Files Files[]

  Annotations Annotations[]
  Documents   Documents[]

  DocumentDeltas DocumentDeltas[]

  documentCollaborators DocumentCollaborators[] @relation("User")
  invitedCollaborators  DocumentCollaborators[] @relation("Inviter")
  OfficeDocuments       OfficeDocuments[]
  SyncSessions          SyncSessions[]
}

enum SubscriptionStatus {
  active
  inactive
  trial
}

enum UserType {
  admin
  individual
  institutional
  institutional_admin
}

enum SubscriptionPlan {
  MONTHLY
  YEARLY
  INSTITUTIONAL
}

// ======= EMAIL VERIFICATION =========
model EmailVerification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String
  createdAt DateTime @default(now()) @map("created_at")
}

// ======= PASSWORD RESET =========
model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String
  createdAt DateTime @default(now()) @map("created_at")
}

// ======= INSTITUTION =========
model Institution {
  id                 String             @id @default(uuid()) @db.Uuid
  name               String             @unique
  domain             String             @unique
  subscriptionPlan   SubscriptionPlan?  @map("subscription_plan") // nullable enum
  subscriptionStatus SubscriptionStatus @default(inactive) @map("subscription_status")
  isActive           Boolean            @default(true) @map("is_active")
  country            String
  city               String
  address            String
  postalCode         String             @map("postal_code")
  state              String
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at")

  users User[]

  Libraries Libraries[]
}

// ======= LIBRARIES =============
model Libraries {
  id            String            @id @default(uuid()) @db.Uuid
  name          String
  description   String?           @default("")
  ownerId       String?           @map("owner_id") @db.Uuid // Foreign key
  owner         User?             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  type          LibraryTypes      @default(personal)
  visibility    LibraryVisibility @default(private)
  institutionId String?           @map("institution_id") @db.Uuid
  institution   Institution?      @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  settings      Json?
  storageUsed   BigInt            @default(0) @map("storage_used")
  maxStorage    BigInt            @default(0) @map("max_storage")
  itemCount     Int               @default(0) @map("item_count")
  isDeleted     Boolean           @default(false) @map("is_deleted")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  memberships LibraryMemberships[]

  LibraryInvitations LibraryInvitations[]

  Collections Collections[]

  References References[]
  Documents  Documents[]
}

enum LibraryTypes {
  personal
  shared
  group
  institutional
  project
  template
}

enum LibraryVisibility {
  private
  members_only
  public
}

// ======= LIBRARY MEMBERSHIPS =============
model LibraryMemberships {
  id          String         @id @default(uuid()) @db.Uuid
  libraryId   String         @map("library_id") @db.Uuid // Foreign key
  library     Libraries      @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  userId      String         @map("user_id") @db.Uuid // Foreign key
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        MembershipRole @default(member)
  permissions Json?
  invitedBy   String?        @map("invited_by") @db.Uuid // Foreign key
  inviter     User?          @relation("UserInvites", fields: [invitedBy], references: [id], onDelete: SetNull)
  acceptedAt  DateTime?      @map("accepted_at")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  @@unique([libraryId, userId])
  @@map("library_memberships")
}

enum MembershipRole {
  owner
  admin
  editor
  viewer
  member
}

// ======= LIBRARY INVITATIONS =============
model LibraryInvitations {
  id          String         @id @default(uuid()) @db.Uuid
  token       String         @unique @default(uuid())
  libraryId   String         @map("library_id") @db.Uuid
  library     Libraries      @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  email       String
  role        MembershipRole @default(member)
  permissions Json?
  invitedBy   String         @map("invited_by") @db.Uuid
  inviter     User           @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  expiresAt   DateTime       @map("expires_at")
  acceptedAt  DateTime?      @map("accepted_at")
  isExpired   Boolean        @default(false) @map("is_expired")
  createdAt   DateTime       @default(now()) @map("created_at")

  @@map("library_invitations")
}

// ======= COLLECTIONS =============
model Collections {
  id          String       @id @default(uuid()) @db.Uuid
  libraryId   String       @map("library_id") @db.Uuid
  library     Libraries    @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  parentId    String?      @map("parent_id") @db.Uuid
  parent      Collections? @relation("CollectionHierarchy", fields: [parentId], references: [id])
  name        String       @unique
  description String?
  color       String?
  sortOrder   Int?         @map("sort_order")
  isDeleted   Boolean      @default(false) @map("is_deleted")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @map("updated_at")

  Collections Collections[] @relation("CollectionHierarchy")

  CollectionItems CollectionItems[]
}

// ======= COLLECTION_ITEMS =============
model CollectionItems {
  id           String      @id @default(uuid()) @db.Uuid
  collectionId String      @map("collection_id") @db.Uuid
  collection   Collections @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  referenceId  String      @map("reference_id") @db.Uuid
  reference    References  @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  sortOrder    Int?        @map("sort_order")
  createdAt    DateTime    @default(now()) @map("created_at")

  @@unique([collectionId, referenceId])
  @@map("collection_items")
}

// ======= REFERENCES =============
model References {
  id            String                   @id @default(uuid()) @db.Uuid
  libraryId     String                   @map("library_id") @db.Uuid
  library       Libraries                @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  type          String
  title         String
  authors       Json?                    @db.JsonB
  editors       Json?                    @db.JsonB
  publication   String?
  publisher     String?
  year          Int?
  volume        String?
  issue         String?
  pages         String?
  doi           String?
  isbn          String?
  issn          String?
  url           String?
  abstractText  String?                  @map("abstract_text")
  language      String?
  metadata      Json?                    @db.JsonB
  tags          String[]
  notes         String?
  dateAdded     DateTime                 @default(now()) @map("date_added")
  dateModified  DateTime                 @default(now()) @updatedAt @map("date_modified")
  addedBy       String                   @map("added_by") @db.Uuid
  modifiedBy    String?                  @map("modified_by") @db.Uuid
  citationCount Int                      @default(0) @map("citation_count")
  isDeleted     Boolean                  @default(false) @map("is_deleted")
  searchVector  Unsupported("tsvector")? @map("search_vector")
  createdAt     DateTime                 @default(now()) @map("created_at")
  updatedAt     DateTime                 @default(now()) @map("updated_at")

  addedByUser     User              @relation("ReferencesAddedBy", fields: [addedBy], references: [id])
  modifiedByUser  User?             @relation("ReferencesModifiedBy", fields: [modifiedBy], references: [id])
  CollectionItems CollectionItems[]
  Files           Files[]
  Citation        Citation[]

  @@map("references")
}

// ======= FILES =============
model Files {
  id               String          @id @default(uuid()) @db.Uuid
  referenceId      String          @map("reference_id") @db.Uuid
  reference        References      @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  filename         String
  originalFilename String          @map("original_filename")
  fileType         String          @map("file_type")
  fileSize         BigInt          @default(0) @map("file_size")
  mimeType         String?         @map("mime_type")
  storagePath      String          @map("storage_path")
  storageProvider  StorageProvider @default(local) @map("storage_provider")
  version          Int?            @default(1)
  checksum         String?
  downloadCount    Int             @default(0)
  isPrimary        Boolean         @default(false) @map("is_primary")
  uploadedBy       String          @map("uploaded_by") @db.Uuid
  uploader         User            @relation(fields: [uploadedBy], references: [id])
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")

  Annotations Annotations[]
}

enum StorageProvider {
  s3
  local
}

// ====== ANNOTATIONS ==========
model Annotations {
  id           String          @id @default(uuid()) @db.Uuid
  fileId       String          @map("file_id") @db.Uuid
  file         Files           @relation(fields: [fileId], references: [id])
  userId       String          @map("user_id") @db.Uuid
  user         User            @relation(fields: [userId], references: [id])
  type         AnnotationsType @default(note)
  content      String
  positionData Json            @map("position_data")
  color        String?         @default("#ffffff")
  tags         String[]
  isShared     Boolean         @default(false)
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @default(now()) @map("updated_at")
}

enum AnnotationsType {
  highlight
  note
  strikethrough
  underline
  drawing
  text
  link
}

// ========= DOCUMENTS ===================
model Documents {
  id             String             @id @default(uuid()) @db.Uuid
  title          String
  content        String
  currentVersion Int                @default(0) @map("current_version")
  contentDelta   Json               @map("content_delta")
  libraryId      String             @map("library_id") @db.Uuid
  library        Libraries          @relation(fields: [libraryId], references: [id])
  createdBy      String             @map("user_id") @db.Uuid
  created        User               @relation(fields: [createdBy], references: [id])
  citationStyle  String             @map("citation_style")
  templateId     String?            @map("template_id") @db.Uuid
  template       DocumentTemplates? @relation(fields: [templateId], references: [id])
  wordCount      Int                @default(0) @map("word_count")
  charCount      Int                @default(0) @map("char_count")
  version        Int                @default(0) @map("version")
  isPublished    Boolean            @default(false) @map("is_published")
  publishedAt    DateTime           @default(now()) @map("published_at")
  isDeleted      Boolean            @default(false) @map("is_deleted")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @default(now()) @map("updated_at")

  deltas                DocumentDeltas[]
  DocumentCollaborators DocumentCollaborators[]
  Citation              Citation[]
  CollaborationSession  CollaborationSession[]

  @@map("documents")
}

model DocumentTemplates {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String
  content     String
  styleConfig Json     @map("style_config")
  category    String
  usageCount  Int      @default(0) @map("usage_count")
  isPublic    Boolean  @default(true) @map("is_public")
  createdBy   String   @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  Documents Documents[]
}

model DocumentDeltas {
  id         String    @id @default(uuid()) @db.Uuid
  documentId String    @map("document_id") @db.Uuid
  document   Documents @relation(fields: [documentId], references: [id], onDelete: Cascade)
  ops        Json // Delta operasyonları
  version    Int // Bu delta'nın versiyonu
  userId     String    @map("user_id") @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  timestamp  DateTime  @default(now())

  @@index([documentId, version])
  @@map("document_deltas")
}

model DocumentCollaborators {
  id           String            @id @default(uuid()) @db.Uuid
  documentId   String            @map("document_id") @db.Uuid
  document     Documents         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  userId       String            @map("user_id") @db.Uuid
  user         User              @relation("User", fields: [userId], references: [id])
  role         CollaboratorRoles @default(viewer)
  permissions  Json?
  invitedBy    String?           @map("invited_by") @db.Uuid
  inviter      User?             @relation("Inviter", fields: [invitedBy], references: [id])
  acceptedAt   DateTime?         @map("accepted_at")
  lastAccessed DateTime?         @map("last_accessed")
  createdAt    DateTime          @default(now()) @map("created_at")

  @@unique([documentId, userId])
}

enum CollaboratorRoles {
  owner
  editor
  viewer
}

// ======= CITATIONS ==========
model Citation {
  id             String   @id @default(uuid()) @db.Uuid
  documentId     String   @map("document_id") @db.Uuid
  referenceId    String   @map("reference_id") @db.Uuid
  locationData   Json?    @map("location_data")
  citationText   String   @map("citation_text")
  pageNumbers    String?  @map("page_numbers")
  prefix         String?
  suffix         String?
  suppressAuthor Boolean  @default(false) @map("suppress_author")
  suppressDate   Boolean  @default(false) @map("suppress_date")
  styleOverride  Json?    @map("style_override")
  sortOrder      Int      @default(0) @map("sort_order")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  document  Documents  @relation(fields: [documentId], references: [id])
  reference References @relation(fields: [referenceId], references: [id])
}

model CitationStyle {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  shortName     String   @map("short_name")
  description   String?
  cslContent    String   @map("csl_content")
  category      String
  isDefault     Boolean  @default(false) @map("is_default")
  isCustom      Boolean  @default(false) @map("is_custom")
  createdBy     String?  @map("created_by") @db.Uuid
  downloadCount Int      @default(0) @map("download_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}

// ====== COLLABORATION SESSION ==========
model CollaborationSession {
  id                 String    @id @default(uuid()) @db.Uuid
  documentId         String    @map("document_id") @db.Uuid
  participants       Json      @default("[]") // Active User
  operationLog       Json      @default("[]") @map("operation_log") // Text opt
  currentState       Json      @default("{}") @map("current_state")
  conflictResolution Json      @default("{}") @map("conflict_resolution")
  sessionData        Json      @default("{}") @map("session_data")
  isActive           Boolean   @default(true) @map("is_active")
  startedAt          DateTime  @default(now()) @map("started_at")
  endedAt            DateTime? @map("ended_at")
  lastActivity       DateTime  @default(now()) @map("last_activity")

  document Documents @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("collaboration_sessions")
}

// ========== OFFICE DOCUMENTS ==============
model OfficeDocuments {
  id                 String     @id @default(uuid()) @db.Uuid
  userId             String     @map("user_id") @db.Uuid
  documentPath       String     @map("document_path")
  documentName       String     @map("document_name")
  documentHash       String     @map("document_hash")
  platform           Platforms  @default(word)
  platformDocumentId String?    @map("platform_document_id") // Google Docs ID, Word internal ID
  citationMapping    Json       @default("{}") @map("citation_mapping")
  libraryLinks       Json       @default("{}") @map("library_links")
  lastSync           DateTime?  @map("last_sync")
  wordProcessorType  String     @default("microsoft-word") @map("word_processor_type")
  versionInfo        Json       @default("{}") @map("version_info")
  syncStatus         SyncStatus @default(pending)
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")

  user         User           @relation(fields: [userId], references: [id])
  SyncSessions SyncSessions[]

  @@map("office_documents")
}

enum Platforms {
  word
  google_docs
  libreoffice
}

enum SyncStatus {
  pending
  syncing
  synced
  error
}

// ============== SYNC SESSIONS =============================
model SyncSessions {
  id                 String            @id @default(uuid()) @db.Uuid
  userId             String            @map("user_id") @db.Uuid
  officeDocumentId   String            @map("office_document_id") @db.Uuid
  platformType       String            @map("platform_type") // 'word', 'google-docs'
  syncType           SyncType          @map("sync_type")
  syncData           Json              @default("{}") @map("sync_data")
  conflicts          Json              @default("[]")
  resolutionStrategy String            @default("last-writer-wins") @map("resolution_strategy")
  itemsSynced        Int               @default(0) @map("items_synced")
  errorsCount        Int               @default(0) @map("errors_count")
  startedAt          DateTime          @default(now()) @map("started_at")
  completedAt        DateTime?         @map("completed_at")
  status             SyncSessionStatus @default(pending)

  user           User            @relation(fields: [userId], references: [id])
  officeDocument OfficeDocuments @relation(fields: [officeDocumentId], references: [id])

  @@map("sync_sessions")
}

enum SyncType {
  manual
  automatic
  real_time
}

enum SyncSessionStatus {
  pending
  running
  completed
  failed
}
